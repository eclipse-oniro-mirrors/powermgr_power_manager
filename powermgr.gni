# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

declare_args() {
  power_manager_feature_allow_interrupting_powerkey_off = true
  power_manager_feature_poweroff_charge = false
  power_manager_feature_runninglock = true
  power_manager_feature_shutdown_reboot = true
  power_manager_feature_screen_on_off = true
  power_manager_feature_power_state = true
  power_manager_feature_power_mode = true
  power_manager_feature_wakeup_action = false
  power_manager_feature_power_dialog = true
  power_manager_feature_enable_s4 = false
  power_manager_feature_audio_lock_unproxy = false
  power_manager_feature_screen_on_timeout_check = false
  power_manager_feature_doubleclick = true
  power_manager_feature_pickup = true
  power_manager_feature_force_sleep_broadcast = false
  power_manager_feature_movement = true
  power_manager_feature_charging_type_setting = false
  power_manager_feature_external_screen_management = false
  power_manager_feature_block_long_press = false
  power_manager_feature_judging_takeover_shutdown = false
  power_manager_feature_watch_limit_screen_common_event_publish = false
  power_manager_feature_watch_update_adapt = false
  power_manager_feature_watch_boot_completed = false
}

defines = []

if (power_manager_feature_enable_s4) {
  defines += [ "POWER_MANAGER_POWER_ENABLE_S4" ]
}

if (power_manager_feature_audio_lock_unproxy) {
  defines += [ "POWER_MANAGER_AUDIO_LOCK_UNPROXY" ]
}

if (!defined(global_parts_info) ||
    defined(global_parts_info.powermgr_display_manager)) {
  has_display_manager_part = true
  defines += [ "HAS_DISPLAY_MANAGER_PART" ]
} else {
  has_display_manager_part = false
}

if (!defined(global_parts_info) ||
    defined(global_parts_info.resourceschedule_device_standby)) {
  has_device_standby_part = true
  defines += [ "HAS_DEVICE_STANDBY_PART" ]
} else {
  has_device_standby_part = false
}

if (!defined(global_parts_info) || defined(global_parts_info.sensors_sensor)) {
  has_sensors_sensor_part = true
  defines += [ "HAS_SENSORS_SENSOR_PART" ]
} else {
  has_sensors_sensor_part = false
}

if (!defined(global_parts_info) ||
    defined(global_parts_info.multimodalinput_input)) {
  has_multimodalinput_input_part = true
  defines += [ "HAS_MULTIMODALINPUT_INPUT_PART" ]
} else {
  has_multimodalinput_input_part = false
}

if (!defined(global_parts_info) ||
    defined(global_parts_info.hiviewdfx_hisysevent)) {
  has_hiviewdfx_hisysevent_part = true
  defines += [ "HAS_HIVIEWDFX_HISYSEVENT_PART" ]
} else {
  has_hiviewdfx_hisysevent_part = false
}

if (!defined(global_parts_info) ||
    defined(global_parts_info.hiviewdfx_hitrace)) {
  has_hiviewdfx_hitrace_part = true
  defines += [ "HAS_HIVIEWDFX_HITRACE_PART" ]
} else {
  has_hiviewdfx_hitrace_part = false
}

if (!defined(global_parts_info) ||
    defined(global_parts_info.hiviewdfx_hiview)) {
  has_dfx_hiview_part = true
  defines += [ "HAS_DFX_HIVIEW_PART" ]
} else {
  has_dfx_hiview_part = false
}

if (!defined(global_parts_info) ||
    defined(global_parts_info.ability_ability_runtime)) {
  has_ability_runtime_part = true
  defines += [ "HAS_ABILITY_RUNTIME_PART" ]
} else {
  has_ability_runtime_part = false
}

ability_runtime_path = "//foundation/ability/ability_runtime"

ability_runtime_inner_api_path = "${ability_runtime_path}/interfaces/inner_api"

ability_runtime_services_path = "${ability_runtime_path}/services"

powermgr_part_name = "power_manager"

powermgr_root_path = "//base/powermgr/power_manager"

powermgr_service_path = "${powermgr_root_path}/services"

powermgr_service_zidl = "${powermgr_service_path}/zidl"

powermgr_framework = "${powermgr_root_path}/frameworks"
powermgr_framework_native = "${powermgr_framework}/native"

powermgr_inner_api = "${powermgr_root_path}/interfaces/inner_api"

powermgr_utils_path = "${powermgr_root_path}/utils"

system_type = "default"
