# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../powermgr.gni")

config("powermgr_public_config") {
  include_dirs = [
    "native/include",
    "zidl/include",
    "${powermgr_inner_api}/native/include",
    "//base/hiviewdfx/hicollie/interfaces/native/innerkits/include/xcollie/",
  ]
}

config("powermgr_private_config") {
  include_dirs = [
    "native/src/setting",
    "native/src/shutdown",
    "native/src/suspend",
    "native/src/wakeup",
  ]
}

ohos_shared_library("powermgrservice") {
  sources = [
    "native/src/power_hdi_callback.cpp",
    "native/src/power_mgr_dumper.cpp",
    "native/src/power_mgr_factory.cpp",
    "native/src/power_mgr_monitor.cpp",
    "native/src/power_mgr_notify.cpp",
    "native/src/power_mgr_service.cpp",
    "native/src/power_mode_module.cpp",
    "native/src/power_mode_policy.cpp",
    "native/src/power_save_mode.cpp",
    "native/src/power_state_machine.cpp",
    "native/src/powerms_event_handler.cpp",
    "native/src/running_lock_inner.cpp",
    "native/src/running_lock_mgr.cpp",
    "native/src/running_lock_proxy.cpp",
    "native/src/setting/setting_helper.cpp",
    "native/src/shutdown/shutdown_callback_holer.cpp",
    "native/src/shutdown/shutdown_controller.cpp",
    "native/src/shutdown_service.cpp",
    "native/src/suspend/suspend_controller.cpp",
    "native/src/suspend/suspend_source_parser.cpp",
    "native/src/suspend/suspend_sources.cpp",
    "native/src/wakeup/wakeup_controller.cpp",
    "native/src/wakeup/wakeup_source_parser.cpp",
    "native/src/wakeup/wakeup_sources.cpp",
  ]

  configs = [
    ":powermgr_private_config",
    "${powermgr_utils_path}:utils_config",
    "${powermgr_utils_path}:coverage_flags",
  ]

  public_configs = [ ":powermgr_public_config" ]

  deps = [
    ":powermgr_stub",
    "${powermgr_inner_api}:powermgr_client",
    "${powermgr_utils_path}/param:power_sysparam",
    "${powermgr_utils_path}/permission:power_permission",
    "${powermgr_utils_path}/setting:power_setting",
    "native/src/actions:powermgr_actions",
    "//foundation/arkui/ace_engine/interfaces/inner_api/ui_service_manager:ui_service_mgr",
    "//third_party/jsoncpp:jsoncpp",
    "//third_party/libxml2:libxml2",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "drivers_interface_power:libpower_proxy_1.1",
    "eventhandler:libeventhandler",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hicollie:libhicollie",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "hiviewdfx_hilog_native:libhilog",
    "input:libmmi-client",
    "ipc:ipc_core",
    "multimedia_image_framework:image_native",
    "safwk:system_ability_fwk",
    "sensor:sensor_interface_native",
  ]

  if (has_display_manager_part) {
    external_deps += [
      "display_manager:displaymgr",
      "window_manager:libdm",
    ]
  }

  if (power_manager_feature_poweroff_charge) {
    external_deps += [
      "battery_manager:batterysrv_client",
      "drivers_interface_factory:libfactory_proxy_1.0",
    ]

    defines = [ "POWER_MANAGER_POWEROFF_CHARGE" ]
  }

  subsystem_name = "powermgr"
  part_name = "${powermgr_part_name}"
}

config("zidl_private_config") {
  include_dirs = [ "zidl/src/shutdown" ]
}

ohos_shared_library("powermgr_stub") {
  sources = [
    "zidl/src/power_mgr_stub.cpp",
    "zidl/src/power_mode_callback_stub.cpp",
    "zidl/src/power_shutdown_callback_stub.cpp",
    "zidl/src/power_state_callback_stub.cpp",
    "zidl/src/shutdown/async_shutdown_callback_sutb.cpp",
    "zidl/src/shutdown/shutdown_stub_delegator.cpp",
    "zidl/src/shutdown/sync_shutdown_callback_sutb.cpp",
  ]

  configs = [
    "${powermgr_utils_path}:utils_config",
    "${powermgr_utils_path}:coverage_flags",
    ":zidl_private_config",
  ]

  public_configs = [ ":powermgr_public_config" ]

  deps = [ "${powermgr_inner_api}:powermgr_client" ]

  external_deps = [
    "c_utils:utils",
    "hicollie:libhicollie",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]

  subsystem_name = "powermgr"
  part_name = "${powermgr_part_name}"
}

group("service") {
  deps = [
    ":powermgr_stub",
    ":powermgrservice",
    "native/profile:power_service_config",
  ]
}
